(function () {
  'use strict';

  // 빌드 정보 (요청 시간 기준)
  const BUILD_INFO = '2025-08-14 00:54';
  console.log('[ClipFollow]', BUILD_INFO);

  const FALLBACK_URL = 'https://clip.naver.com/@creator_clip/follow?tab=follower';

  // 팔로워 탭 판정: URL(엄격) + DOM(탭 활성 상태) 이중 확인
  function isFollowerPage() {
    const path = location.pathname;
    const qs = new URLSearchParams(location.search);
    const tab = (qs.get('tab') || '').toLowerCase();

    // 1) URL: /@{id}/follow & tab=follower
    if (/^\/@[^/]+\/follow\/?$/.test(path) && tab === 'follower') return true;

    // 2) URL이 follow라도 tab 파라미터가 없거나 달 때, DOM에서 '팔로워' 탭 활성 여부 확인
    if (/^\/@[^/]+\/follow\/?$/.test(path)) {
      const activeSel = [
        'a[aria-current="true"]','a[aria-selected="true"]',
        'button[aria-current="true"]','button[aria-selected="true"]',
        '.is_active','.active','.on','[data-selected="true"]'
      ].join(',');
      const active = Array.from(document.querySelectorAll(activeSel))
        .find(el => /팔로워/i.test((el.textContent || '').trim()));
      if (active) return true;
    }
    return false;
  }

  // 도착 대기 후 시작 (SPA 라우팅 등 대응)
  function waitUntilFollowerThenStart(timeoutMs = 15000) {
    const t0 = Date.now();
    const iv = setInterval(() => {
      if (isFollowerPage()) {
        clearInterval(iv);
        startBot();
      } else if (Date.now() - t0 > timeoutMs) {
        clearInterval(iv);
        location.replace(FALLBACK_URL);
      }
    }, 250);
  }

  // 팔로워 탭이 아니면 강제 이동
  if (!isFollowerPage()) {
    if (location.href !== FALLBACK_URL) {
      try { window.stop(); } catch {}
      location.assign(FALLBACK_URL);
      setTimeout(() => { if (!isFollowerPage()) location.replace(FALLBACK_URL); }, 500);
      setTimeout(() => { if (!isFollowerPage()) location.href = FALLBACK_URL; }, 1000);
    }
    waitUntilFollowerThenStart();
    return; // 도착하면 위 루프가 startBot 호출
  }

  // 이미 팔로워 탭이면 바로 시작
  startBot();

  // ================== BOT 본체 ==================
  function startBot() {
    if (window.__followBot) return; // 중복 방지
    window.__followBot = true;

    const S = {
      run: true,
      delay: 650,
      scrollDelay: 900,
      empty: 0,
      scrolls: 0,
      totalFollow: 0,
      totalSurf: 0,
      visited: new Set((() => {
        try { return JSON.parse(localStorage.getItem('__clipVisited__') || '[]'); } catch { return []; }
      })()),
    };
    const save = () => { try {
      localStorage.setItem('__clipVisited__', JSON.stringify([...S.visited].slice(-500)));
    } catch {} };

    // ===== UI =====
    const ui = document.createElement('div');
    ui.style.cssText = [
      'position:fixed','right:12px','bottom:12px','z-index:2147483647',
      'background:rgba(0,0,0,.78)','color:#fff','padding:10px 12px',
      'border-radius:10px','font:12px/1.4 -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial'
    ].join(';');
    ui.innerHTML = `
      <b>Clip Follow</b>
      <div style="opacity:.75;margin-top:2px">Build: ${BUILD_INFO}</div>
      <div id="st" style="margin-top:4px"></div>
      <div style="margin-top:6px">
        <button id="p" style="margin-right:6px;padding:4px 8px;border:0;border-radius:6px;background:#1f9;cursor:pointer">Pause</button>
        <button id="x" style="padding:4px 8px;border:0;border-radius:6px;background:#f66;cursor:pointer">Stop</button>
      </div>
    `;
    document.body.appendChild(ui);

    const ST = ui.querySelector('#st');
    const pauseBtn = ui.querySelector('#p');

    // 첫 상태 표기 (현재 페이지 판정도 같이 표기)
    ST.textContent = `총팔로우:${S.totalFollow} | 파도횟수:${S.totalSurf} | Page:${isFollowerPage() ? 'Follower' : 'Other'}`;

    pauseBtn.onclick = () => {
      S.run = !S.run;
      pauseBtn.textContent = S.run ? 'Pause' : 'Resume';
    };

    const stop = () => {
      S.run = false;
      window.__followBot = false;
      try { ui.remove(); } catch {}
      clearInterval(loop);
      clearInterval(scroller);
      obs && obs.disconnect();
    };
    ui.querySelector('#x').onclick = stop;
    addEventListener('keydown', e => { if (e.key === 'Escape') stop(); });

    // ===== Utils =====
    const QQ = s => Array.from(document.querySelectorAll(s));
    const txt = e => (e.textContent || '').replace(/\s+/g, '').trim();
    const vis = e => { const r = e.getBoundingClientRect(); return r.bottom >= 0 && r.top <= innerHeight + 200; };
    const sleep = ms => new Promise(r => setTimeout(r, ms));

    const markCurrent = () => {
      const m = location.pathname.match(/\/@([^/]+)/);
      const h = m ? decodeURIComponent(m[1]) : null;
      if (h) { S.visited.add(h); save(); }
    };
    markCurrent();

    // ===== Follow 클릭 =====
    function findFollowBtns() {
      return QQ('button,a,[role="button"]').filter(b => {
        const t = txt(b);
        return /팔로우/.test(t) &&
               !/팔로잉|팔로우중|Following/i.test(t) &&
               !b.closest('[disabled],[aria-disabled="true"]') &&
               vis(b);
      });
    }
    async function clickAllFollows() {
      let n = 0;
      for (const b of findFollowBtns()) {
        b.scrollIntoView({ block: 'center' });
        b.dispatchEvent(new MouseEvent('mouseover', { bubbles: true }));
        b.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
        b.click();
        b.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
        n++; S.totalFollow++;
        await sleep(S.delay);
      }
      S.empty = n ? 0 : S.empty + 1;
      return n;
    }

    // ===== 후보 탐색 =====
    function extractIdFromEl(el) {
      let id = null;
      const href = (el && el.getAttribute && el.getAttribute('href')) || '';
      const mh = href.match(/\/@([^/?#]+)/);
      if (mh) id = decodeURIComponent(mh[1]);
      if (!id) {
        const t = (el && (el.innerText || el.textContent) || '').trim();
        const mt = t.match(/@([A-Za-z0-9._-]{3,32})/);
        if (mt) id = mt[1];
      }
      if (!id && el && el.querySelector) {
        const idNode = el.querySelector('[class*="UIProfileListItem_txt_area"],[class*="UIProfileListItem_tit_area"]');
        if (idNode) id = (idNode.innerText || '').trim().replace(/^@/, '').replace(/\s+/g, '');
      }
      if (id) id = id.replace(/^@/, '').replace(/\s+/g, '');
      if (id && !/^[A-Za-z0-9._-]{3,32}$/.test(id)) id = null;
      return id;
    }
    function nextProfileCandidate() {
      const listSel = 'li[class*="UIProfileListItem_list_item"],li[class^="UIProfileListItem_list_item"]';
      const items = QQ(listSel);
      for (const li of items) {
        const link = li.querySelector('a[href^="/@"],a[href*="/@"],a[role="button"],[role="button"]');
        const id = extractIdFromEl(link || li);
        if (id && !S.visited.has(id)) return { id, link: link || li };
      }
      const anchors = QQ('a[href^="/@"],a[href*="/@"]').filter(a => vis(a));
      for (const a of anchors) {
        const id = extractIdFromEl(a);
        if (id && !S.visited.has(id)) return { id, link: a };
      }
      return null;
    }
    async function ensureMoreCandidates() {
      const listSel = 'li[class*="UIProfileListItem_list_item"],li[class^="UIProfileListItem_list_item"]';
      let items = QQ(listSel).filter(vis);
      if (items.length <= 3) {
        scrollTo(0, document.body.scrollHeight);
        await sleep(700);
        scrollBy(0, -Math.floor(innerHeight * 0.5));
        await sleep(300);
        scrollTo(0, 0);
        await sleep(400);
      }
      items = QQ(listSel).filter(vis);
      if (items.length <= 3) {
        const moreBtn = QQ('button,a,[role="button"]').find(el => /더보기|More/i.test(el.textContent || ''));
        if (moreBtn) { moreBtn.click(); await sleep(500); }
      }
    }
    async function surfNextProfile() {
      await ensureMoreCandidates();
      let cand = nextProfileCandidate();
      if (!cand) {
        await ensureMoreCandidates();
        cand = nextProfileCandidate();
      }
      if (!cand) return false;
      S.visited.add(cand.id);
      S.totalSurf++;
      save();
      cand.link.scrollIntoView({ block: 'center' });
      cand.link.click();
      await sleep(500);
      return true;
    }

    // ===== 자동 스크롤러 =====
    let lastH = 0, stuck = 0;
    const scroller = setInterval(() => {
      if (!S.run) return;
      scrollBy(0, Math.floor(innerHeight * 0.85));
      S.scrolls++;
      const h = document.documentElement.scrollHeight;
      if (h === lastH) stuck++; else { stuck = 0; lastH = h; }
      if (stuck > 6) { scrollTo(0, 0); stuck = 0; }
    }, S.scrollDelay);

    // ===== DOM 옵저버 =====
    let justNavigated = false;
    const obs = new MutationObserver(() => {
      if (justNavigated) return;
      const m = location.pathname.match(/\/@([^/]+)/);
      const h = m ? decodeURIComponent(m[1]) : null;
      if (h && !S.visited.has(h)) { S.visited.add(h); save(); }
    });
    obs.observe(document.documentElement, { childList: true, subtree: true });

    // ===== 메인 루프 =====
    const loop = setInterval(async () => {
      if (!S.run) return;

      await clickAllFollows();
      ST.textContent = `총팔로우:${S.totalFollow} | 파도횟수:${S.totalSurf}`;

      // 파도 100회 이상이면 자동 종료
      if (S.totalSurf >= 100) { stop(); return; }

      if (S.empty >= 3) {
        if (await surfNextProfile()) {
          justNavigated = true;
          setTimeout(() => justNavigated = false, 1200);
          S.empty = 0;
          S.scrolls = 0;
        }
      }
    }, 900);
  }
})();
