javascript:(async function() { 'use strict'; var STATE = { followers: [], following: [], onlyIFollow: [], onlyFollowsMe: [], mutual: [], mySpaceId: null, totalFollowers: 0, totalFollowing: 0, listObserver: null, urlObserver: null, buttonsActive: false, currentPageCache: new Map(), lastCursor: null, isFetchingMore: false, currentViewSpaceId: null, isFollowersApprox: false, isFollowingApprox: false, chatLockedUsers: new Set() }; function recalculateFollowLists() { var followerIds = new Set(STATE.followers.map(function(f) { return String(f.spaceId); })); var followingIds = new Set(STATE.following.map(function(f) { return String(f.spaceId); })); STATE.onlyIFollow = STATE.following.filter(function(f) { return !followerIds.has(String(f.spaceId)); }); STATE.onlyFollowsMe = STATE.followers.filter(function(f) { return !followingIds.has(String(f.spaceId)); }); STATE.mutual = STATE.following.filter(function(f) { return followerIds.has(String(f.spaceId)); }); console.log('[데이터 갱신]', { followers: STATE.followers.length, following: STATE.following.length, onlyIFollow: STATE.onlyIFollow.length, onlyFollowsMe: STATE.onlyFollowsMe.length, mutual: STATE.mutual.length }); } function updateFollowStatus(spaceId, isNowFollowing, apiData) { spaceId = String(spaceId); if (isNowFollowing) { var existsInFollowing = STATE.following.some(function(f) { return String(f.spaceId) === spaceId; }); if (!existsInFollowing) { var userInfo = STATE.followers.find(function(f) { return String(f.spaceId) === spaceId; }) || STATE.following.find(function(f) { return String(f.spaceId) === spaceId; }); if (!userInfo) { STATE.currentPageCache.forEach(function(user) { if (String(user.spaceId) === spaceId) { userInfo = user; } }); } if (!userInfo && apiData) { userInfo = { spaceId: apiData.spaceId, nickName: apiData.nickname, activeChannelCount: apiData.activeChannelCount, activeChannelTypes: apiData.activeChannelTypes, myKeyword: '', subscriberCount: 0, urlId: '', createdAt: new Date().toISOString(), lastContentsCreatedAt: null }; console.log('[API 응답으로 userInfo 생성]', userInfo.nickName); } if (userInfo) { STATE.following.push(userInfo); console.log('[팔로우 추가]', userInfo.nickName, '(spaceId:', spaceId + ') - 총 following:', STATE.following.length); } else { console.warn('[팔로우 추가 실패] userInfo를 찾을 수 없음. spaceId:', spaceId); } } else { console.log('[팔로우 추가 스킵] 이미 following에 존재. spaceId:', spaceId); } } else { var beforeCount = STATE.following.length; STATE.following = STATE.following.filter(function(f) { return String(f.spaceId) !== spaceId; }); console.log('[팔로우 제거] spaceId:', spaceId, '- 총 following:', STATE.following.length, '(변화:', (beforeCount - STATE.following.length) + ')'); } recalculateFollowLists(); updateGUIStats(); } function getFollowStatus(spaceId) { spaceId = String(spaceId); var isOnlyIFollow = STATE.onlyIFollow.some(function(f) { return String(f.spaceId) === spaceId; }); var isOnlyFollowsMe = STATE.onlyFollowsMe.some(function(f) { return String(f.spaceId) === spaceId; }); var isMutual = STATE.mutual.some(function(f) { return String(f.spaceId) === spaceId; }); if (isOnlyIFollow) return 'unfollow'; if (isOnlyFollowsMe) return 'followback'; if (isMutual) return 'mutual'; return 'follow'; } async function toggleFollow(spaceId, currentStatus) { try { var subscribed = (currentStatus === 'unfollow' || currentStatus === 'mutual'); console.log('[팔로우 토글]', currentStatus, '→', subscribed ? '언팔로우' : '팔로우', 'spaceId:', spaceId); var response = await fetch('https://in.naver.com/graphql', { method: 'POST', credentials: 'include', headers: { 'accept': '*/*', 'content-type': 'application/json', 'x-api-level': '11' }, body: JSON.stringify({ operationName: 'toggleSubscription', variables: { input: { subscribed: subscribed, spaceId: spaceId, notification: !subscribed } }, query: 'mutation toggleSubscription($input: ToggleSubscriptionInput!) { toggleSubscription(input: $input) { activeChannelCount activeChannelTypes nickname spaceId __typename } }' }) }); if (response.ok) { var result = await response.json(); var userData = result.data && result.data.toggleSubscription ? result.data.toggleSubscription : null; console.log('[팔로우 토글 성공]', subscribed ? '언팔로우' : '팔로우', 'spaceId:', spaceId, 'API 응답:', userData); updateFollowStatus(spaceId, !subscribed, userData); return true; } console.log('[팔로우 토글 실패] HTTP', response.status); return false; } catch (e) { console.error('[팔로우 토글 오류]:', e); return false; } } async function openChatWindow(targetSpaceId) { try { var talkUrlResponse = await fetch('https://gw.in.naver.com/home/api/v1/spaces/' + targetSpaceId + '/talktalk-url', { credentials: 'include', headers: { 'accept': 'application/json, text/plain, */*', 'x-api-level': '11' } }); if (talkUrlResponse.status === 423) { console.log('[채팅 LOCK] spaceId:', targetSpaceId, '- 채팅이 잠긴 상태입니다.'); STATE.chatLockedUsers.add(String(targetSpaceId)); return 'locked'; } if (!talkUrlResponse.ok) return false; var talkUrlData = await talkUrlResponse.json(); if (!talkUrlData.chatUrl) return false; window.open(talkUrlData.chatUrl, '_blank'); return true; } catch (e) { console.error('채팅창 열기 실패:', e); return false; } } function removeAllListButtons() { document.querySelectorAll('.inflsurfer-action-btn').forEach(function(btn) { btn.remove(); }); } async function fetchCurrentPageFollowers(cursor) { try { var currentSpaceId = STATE.currentViewSpaceId; if (!currentSpaceId && window.__NEXT_DATA__) { try { var pageProps = window.__NEXT_DATA__.props.pageProps; if (pageProps && pageProps.space && pageProps.space.spaceId) { currentSpaceId = pageProps.space.spaceId; } } catch (e) { console.error('[현재 페이지 캐시] __NEXT_DATA__ 파싱 오류:', e); } } if (!currentSpaceId) { var pathMatch = window.location.pathname.match(/\/([^\/]+)/); if (pathMatch && pathMatch[1]) { var urlId = pathMatch[1]; var user = STATE.followers.find(function(f) { return f.urlId === urlId; }) || STATE.following.find(function(f) { return f.urlId === urlId; }); if (user) { currentSpaceId = user.spaceId; STATE.currentViewSpaceId = currentSpaceId; console.log('[현재 페이지 캐시] URL에서 spaceId 찾음:', currentSpaceId, '(urlId:', urlId + ')'); } } } if (!currentSpaceId) { console.log('[현재 페이지 캐시] spaceId를 찾을 수 없습니다.'); return null; } var apiUrl = 'https://gw.in.naver.com/home/api/v2/spaces/' + currentSpaceId + '/subscribes/followers?limit=20&subscriberType=SPACE&sort=RECENT'; if (cursor) { apiUrl = 'https://gw.in.naver.com/home/api/v2/spaces/' + currentSpaceId + '/subscribes/followers?cursor=' + cursor + '&limit=20&subscriberType=SPACE&sort=RECENT'; console.log('[현재 페이지 캐시] 추가 로드 API 호출'); } else { console.log('[현재 페이지 캐시] 초기 로드 API 호출. spaceId:', currentSpaceId); STATE.currentPageCache.clear(); } var response = await fetch(apiUrl, { credentials: 'include', headers: { 'accept': 'application/json, text/plain, */*', 'x-api-level': '11' } }); if (!response.ok) { console.log('[현재 페이지 캐시] API 호출 실패:', response.status); return null; } var data = await response.json(); data.data.forEach(function(user) { STATE.currentPageCache.set(user.nickName, user); }); console.log('[현재 페이지 캐시] 저장 완료. 총 캐시:', STATE.currentPageCache.size, '명 | 현재 배치:', data.data.length, '명'); return data.paging && data.paging.nextCursor ? data.paging.nextCursor : null; } catch (e) { console.error('[현재 페이지 캐시] 오류:', e); return null; } } function addButtonsToListItem(listItem) { if (listItem.querySelector('.inflsurfer-action-btn')) return; var infoButton = listItem.querySelector('button[class*="MySubscriptionItem"][class*="info"]'); if (!infoButton) return; var detailDiv = infoButton.querySelector('[class*="MySubscriptionItem"][class*="detail"]'); if (!detailDiv) return; var fanSpan = detailDiv.querySelector('[class*="MySubscriptionItem"][class*="fan"]'); var fanCount = 0; if (fanSpan) { fanCount = parseInt(fanSpan.textContent.replace(/[^0-9]/g, '')) || 0; } var nicknameSpan = listItem.querySelector('[class*="MySubscriptionItem"][class*="nickname"] span'); var nickname = nicknameSpan ? nicknameSpan.textContent : ''; var follower = STATE.followers.find(function(f) { return f.nickName === nickname; }); var following = STATE.following.find(function(f) { return f.nickName === nickname; }); var cached = STATE.currentPageCache.get(nickname); var spaceId = null; var urlId = null; if (follower) { spaceId = follower.spaceId; urlId = follower.urlId; } else if (following) { spaceId = following.spaceId; urlId = following.urlId; } else if (cached) { spaceId = cached.spaceId; urlId = cached.urlId; console.log('[캐시 사용]', nickname, 'spaceId:', spaceId); } var buttonContainer = document.createElement('div'); buttonContainer.className = 'inflsurfer-action-btn'; buttonContainer.style.cssText = 'display: flex; gap: 4px; margin-top: 6px;'; var isMyAccount = spaceId && String(spaceId) === String(STATE.mySpaceId); var goBtn = document.createElement('button'); goBtn.textContent = '이동하기'; goBtn.style.cssText = 'padding: 4px 8px; font-size: 11px; border-radius: 4px; border: none; font-weight: 500; flex: 1;'; if (fanCount < 1 || !urlId) { goBtn.style.background = '#ddd'; goBtn.style.color = '#999'; goBtn.style.cursor = 'not-allowed'; goBtn.onclick = function(e) { e.stopPropagation(); e.preventDefault(); }; } else { goBtn.style.background = '#00c73c'; goBtn.style.color = 'white'; goBtn.style.cursor = 'pointer'; goBtn.onclick = function(e) { e.stopPropagation(); infoButton.click(); var attempts = 0; var maxAttempts = 10; var checkInterval = setInterval(function() { attempts++; var fanLink = document.querySelector('[data-role="fan"]'); if (fanLink) { clearInterval(checkInterval); console.log('[이동하기] 팬 링크 발견, 클릭 시도 (' + attempts + '번째)'); fanLink.click(); } else if (attempts >= maxAttempts) { clearInterval(checkInterval); console.log('[이동하기] 팬 링크를 찾을 수 없습니다 (최대 시도 횟수 초과)'); } }, 200); }; } var statusBtn = document.createElement('button'); statusBtn.style.cssText = 'padding: 4px 8px; font-size: 11px; border-radius: 4px; border: none; font-weight: 500; flex: 1;'; var chatBtn = document.createElement('button'); chatBtn.textContent = '채팅 열기'; chatBtn.style.cssText = 'padding: 4px 8px; font-size: 11px; border-radius: 4px; border: none; font-weight: 500; flex: 1;'; function updateStatusButton() { if (!spaceId) { statusBtn.textContent = '정보 수집 중'; statusBtn.style.background = '#ddd'; statusBtn.style.color = '#999'; statusBtn.style.cursor = 'not-allowed'; statusBtn.onclick = function(e) { e.stopPropagation(); e.preventDefault(); }; return; } if (isMyAccount) { statusBtn.textContent = '내 계정'; statusBtn.style.background = '#999'; statusBtn.style.color = 'white'; statusBtn.style.cursor = 'not-allowed'; statusBtn.onclick = function(e) { e.stopPropagation(); e.preventDefault(); }; return; } var status = getFollowStatus(spaceId); if (status === 'unfollow') { statusBtn.textContent = '팬 취소'; statusBtn.style.background = '#ffc107'; statusBtn.style.color = 'white'; statusBtn.style.cursor = 'pointer'; statusBtn.onclick = async function(e) { e.stopPropagation(); if (await toggleFollow(spaceId, 'unfollow')) { updateStatusButton(); updateChatButton(); } }; } else if (status === 'followback') { statusBtn.textContent = '맞팬 수락'; statusBtn.style.background = '#2196F3'; statusBtn.style.color = 'white'; statusBtn.style.cursor = 'pointer'; statusBtn.onclick = async function(e) { e.stopPropagation(); if (await toggleFollow(spaceId, 'followback')) { updateStatusButton(); updateChatButton(); } }; } else if (status === 'mutual') { statusBtn.textContent = '맞팬 완료'; statusBtn.style.background = '#999'; statusBtn.style.color = 'white'; statusBtn.style.cursor = 'not-allowed'; statusBtn.onclick = function(e) { e.stopPropagation(); e.preventDefault(); }; } else { statusBtn.textContent = '팬 하기'; statusBtn.style.background = '#00c73c'; statusBtn.style.color = 'white'; statusBtn.style.cursor = 'pointer'; statusBtn.onclick = async function(e) { e.stopPropagation(); if (await toggleFollow(spaceId, 'follow')) { updateStatusButton(); updateChatButton(); } }; } } function updateChatButton() { if (spaceId && STATE.chatLockedUsers.has(String(spaceId))) { chatBtn.textContent = '채팅 LOCK'; chatBtn.style.background = '#999'; chatBtn.style.color = '#ddd'; chatBtn.style.cursor = 'not-allowed'; chatBtn.onclick = function(e) { e.stopPropagation(); e.preventDefault(); }; } else if (spaceId && getFollowStatus(spaceId) === 'unfollow') { chatBtn.textContent = '채팅 열기'; chatBtn.style.background = '#9c27b0'; chatBtn.style.color = 'white'; chatBtn.style.cursor = 'pointer'; chatBtn.onclick = async function(e) { e.stopPropagation(); var result = await openChatWindow(spaceId); if (result === 'locked') { updateChatButton(); } }; } else { chatBtn.textContent = '채팅 열기'; chatBtn.style.background = '#ddd'; chatBtn.style.color = '#999'; chatBtn.style.cursor = 'not-allowed'; chatBtn.onclick = function(e) { e.stopPropagation(); e.preventDefault(); }; } } updateStatusButton(); updateChatButton(); buttonContainer.appendChild(goBtn); buttonContainer.appendChild(statusBtn); buttonContainer.appendChild(chatBtn); detailDiv.appendChild(buttonContainer); } async function addButtonsToAllItems() { var listItems = document.querySelectorAll('li[class*="MySubscriptionItem"][class*="root"]'); console.log('[버튼 추가] 발견된 항목:', listItems.length); STATE.lastCursor = await fetchCurrentPageFollowers(null); listItems.forEach(function(item) { addButtonsToListItem(item); }); } function startObservingList() { if (STATE.listObserver) STATE.listObserver.disconnect(); var targetNode = document.querySelector('ul'); if (!targetNode) { console.log('[Observer] UL 요소를 찾을 수 없습니다. 1초 후 재시도...'); setTimeout(startObservingList, 1000); return; } var addedItemsQueue = []; var processTimeout = null; STATE.listObserver = new MutationObserver(function(mutations) { mutations.forEach(function(mutation) { if (mutation.type === 'childList') { mutation.addedNodes.forEach(function(node) { if (node.nodeType === 1 && node.className && node.className.indexOf('MySubscriptionItem') !== -1 && node.className.indexOf('root') !== -1) { addedItemsQueue.push(node); } }); } }); if (addedItemsQueue.length > 0) { clearTimeout(processTimeout); processTimeout = setTimeout(async function() { var items = addedItemsQueue.slice(); addedItemsQueue = []; console.log('[Observer] 새 항목 감지:', items.length, '개'); var missingItems = []; items.forEach(function(item) { var nicknameSpan = item.querySelector('[class*="MySubscriptionItem"][class*="nickname"] span'); var nickname = nicknameSpan ? nicknameSpan.textContent : ''; if (nickname && !STATE.currentPageCache.has(nickname) && !STATE.followers.some(function(f) { return f.nickName === nickname; }) && !STATE.following.some(function(f) { return f.nickName === nickname; })) { missingItems.push(nickname); } }); console.log('[Observer] 캐시 미스:', missingItems.length, '개', missingItems.slice(0, 3)); if (missingItems.length > 0 && !STATE.isFetchingMore) { STATE.isFetchingMore = true; console.log('[Observer] 추가 데이터 로드 시작... 현재 커서:', STATE.lastCursor || '(없음 - 초기 로드)'); var nextCursor = await fetchCurrentPageFollowers(STATE.lastCursor); STATE.lastCursor = nextCursor; STATE.isFetchingMore = false; console.log('[Observer] 추가 데이터 로드 완료. 다음 커서:', nextCursor || '(끝)'); } else if (missingItems.length > 0 && STATE.isFetchingMore) { console.log('[Observer] 이미 데이터 로드 중이므로 대기...'); } items.forEach(function(item) { addButtonsToListItem(item); }); }, 500); } }); STATE.listObserver.observe(targetNode, { childList: true, subtree: true }); console.log('[Observer] 목록 감시 시작'); } function startUrlObserver() { var lastUrl = location.href; STATE.urlObserver = new MutationObserver(function() { var currentUrl = location.href; if (currentUrl !== lastUrl) { console.log('[URL 변경 감지]', lastUrl, '→', currentUrl); lastUrl = currentUrl; if (STATE.buttonsActive) { STATE.currentPageCache.clear(); STATE.lastCursor = null; STATE.isFetchingMore = false; STATE.currentViewSpaceId = null; setTimeout(async function() { removeAllListButtons(); await addButtonsToAllItems(); startObservingList(); }, 1000); } } }); STATE.urlObserver.observe(document.body, { childList: true, subtree: true }); console.log('[URL Observer] 시작'); } if (!window.XLSX) { var script = document.createElement('script'); script.src = 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js'; document.head.appendChild(script); await new Promise(function(resolve) { script.onload = resolve; }); } var gui = document.createElement('div'); gui.id = 'influencer-surfer-gui'; gui.innerHTML = '<div style="position: fixed; bottom: 20px; right: 20px; width: 350px; background: white; border: 2px solid #00c73c; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.15); font-family: -apple-system, BlinkMacSystemFont, Segoe UI, sans-serif; z-index: 999999;"><div style="background: linear-gradient(135deg, #00c73c 0%, #00a030 100%); color: white; padding: 15px; border-radius: 10px 10px 0 0; font-weight: bold; font-size: 16px;">인플 맞팬 도구 ver.2025.10.05</div><div style="padding: 20px;"><div style="text-align: center; margin-bottom: 15px; padding: 10px; background: #f8f9fa; border-radius: 6px; font-size: 13px; color: #333;">늑대왕의 블로그 정보 토론방: <a href="https://open.kakao.com/o/gZmiqNDh" target="_blank" style="color: #00c73c; font-weight: bold; text-decoration: none; border-bottom: 1px solid #00c73c;">들어가기</a></div><div id="status-text" style="margin-bottom: 15px; font-size: 14px; color: #333; min-height: 60px;">초기화 중...</div><div id="progress-container" style="background: #f0f0f0; height: 8px; border-radius: 4px; margin-bottom: 15px; overflow: hidden;"><div id="progress-bar" style="background: linear-gradient(90deg, #00c73c 0%, #00e647 100%); height: 100%; width: 0%; transition: width 0.3s;"></div></div><div id="button-container" style="display: flex; gap: 10px; flex-direction: column;"></div></div></div>'; document.body.appendChild(gui); var statusText = document.getElementById('status-text'); var progressBar = document.getElementById('progress-bar'); var buttonContainer = document.getElementById('button-container'); function updateStatus(text, progress) { statusText.innerHTML = text; if (progress !== undefined) progressBar.style.width = progress + '%'; } function updateGUIStats() { if (!STATE.buttonsActive) return; updateStatus('<div style="color: #00c73c; font-weight: bold; font-size: 15px; margin-bottom: 10px;">✓ 작업 완료!</div><div style="font-size: 13px; line-height: 1.6; color: #555;">• 나를 팬 한: ' + STATE.followers.length + '명' + (STATE.totalFollowers && STATE.totalFollowers !== STATE.followers.length ? ' <span style="color: #999;">(웹화면 상 표시: ' + (STATE.isFollowersApprox ? '약 ' : '') + STATE.totalFollowers.toLocaleString() + (STATE.isFollowersApprox ? '+' : '') + '명)</span>' : '') + '<br>• 내가 팬 한: ' + STATE.following.length + '명' + (STATE.totalFollowing && STATE.totalFollowing !== STATE.following.length ? ' <span style="color: #999;">(웹화면 상 표시: ' + (STATE.isFollowingApprox ? '약 ' : '') + STATE.totalFollowing.toLocaleString() + (STATE.isFollowingApprox ? '+' : '') + '명)</span>' : '') + '<br>• 나만 팬 한: ' + STATE.onlyIFollow.length + '명<br>• 상대만 팬 한: ' + STATE.onlyFollowsMe.length + '명<br>• 서로 팬 한: ' + STATE.mutual.length + '명<br><br><span style="font-size: 11px; color: #999;">💡 비인플 명단은 추출되지 않아 숫자 차이가 날 수 있습니다.</span></div>', 100); } function addButton(text, onClick, color) { var btn = document.createElement('button'); btn.textContent = text; btn.style.cssText = 'padding: 12px; background: ' + (color || '#00c73c') + '; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: bold; font-size: 14px; transition: all 0.2s;'; btn.onmouseover = function() { btn.style.transform = 'translateY(-2px)'; }; btn.onmouseout = function() { btn.style.transform = 'translateY(0)'; }; btn.onclick = onClick; buttonContainer.appendChild(btn); return btn; } function closeAndCleanup() { if (STATE.listObserver) STATE.listObserver.disconnect(); if (STATE.urlObserver) STATE.urlObserver.disconnect(); removeAllListButtons(); STATE.buttonsActive = false; gui.remove(); } addButton('❌ 종료', closeAndCleanup, '#ff4444'); function parseCountText(text) { if (!text) return { count: 0, isApprox: false }; var isApprox = false; var count = 0; if (text.includes('만+') || text.includes('만 +')) { isApprox = true; var numStr = text.replace(/[^0-9.]/g, ''); var num = parseFloat(numStr); if (!isNaN(num)) { count = Math.round(num * 10000); } } else { var numStr = text.replace(/,/g, ''); var num = parseInt(numStr); if (!isNaN(num)) { count = num; } } return { count: count, isApprox: isApprox }; } try { updateStatus('페이지 확인 중...', 0); if (window.location.hostname !== 'in.naver.com') { throw new Error('네이버 인플루언서 홈 화면(in.naver.com)에서 실행해주세요.<br><br>예시: https://in.naver.com/본인아이디'); } var urlMatch = window.location.pathname.match(/\/([^\/]+)/); if (!urlMatch || !urlMatch[1]) { throw new Error('본인의 인플루언서 홈 화면에서 실행해주세요.<br><br>예시: https://in.naver.com/본인아이디'); } updateStatus('사용자 정보를 확인하는 중...', 2); updateStatus('팬 목록 페이지로 이동 중...', 3); if (!window.location.pathname.includes('/myFan') && !window.location.pathname.includes('/myStar')) { var fanLinkFound = false; for (var attempt = 0; attempt < 10; attempt++) { var fanLink = document.querySelector('[data-role="fan"]'); if (fanLink) { console.log('[초기화] 팬 링크 발견, 클릭 시도 (' + (attempt + 1) + '번째)'); fanLink.click(); fanLinkFound = true; await new Promise(function(resolve) { setTimeout(resolve, 1500); }); break; } await new Promise(function(resolve) { setTimeout(resolve, 200); }); } if (!fanLinkFound) { console.log('[초기화] 팬 링크를 찾을 수 없습니다 (최대 시도 횟수 초과)'); } } updateStatus('총 팬 수 확인 중...', 5); var tabs = document.querySelectorAll('[role="tab"]'); for (var i = 0; i < tabs.length; i++) { var tab = tabs[i]; var href = tab.getAttribute('href'); var em = tab.querySelector('em'); if (em) { var parsed = parseCountText(em.textContent); if (href && href.includes('/myFan')) { STATE.totalFollowers = parsed.count; STATE.isFollowersApprox = parsed.isApprox; } else if (href && href.includes('/myStar')) { STATE.totalFollowing = parsed.count; STATE.isFollowingApprox = parsed.isApprox; } } } console.log('총 팔로워:', STATE.totalFollowers, STATE.isFollowersApprox ? '(최소)' : '', '총 팔로잉:', STATE.totalFollowing, STATE.isFollowingApprox ? '(최소)' : ''); var spaceId = null; if (window.__NEXT_DATA__) { try { var pageProps = window.__NEXT_DATA__.props.pageProps; if (pageProps) { spaceId = pageProps.spaceId || (pageProps.initialState && pageProps.initialState.space && pageProps.initialState.space.spaceId); } } catch (e) {} } if (!spaceId) { var scripts = document.querySelectorAll('script'); for (var i = 0; i < scripts.length; i++) { var match = (scripts[i].textContent || '').match(/spaceId["\s:]+(\d+)/); if (match) { spaceId = match[1]; break; } } } if (!spaceId) throw new Error('계정 정보를 찾을 수 없습니다. 페이지를 새로고침하고 다시 시도해주세요.'); STATE.mySpaceId = spaceId; console.log('spaceId:', spaceId); updateStatus('나를 팬 한 목록을 가져오는 중...<br><span style="font-size: 12px; color: #666;">0명 수집 완료</span>', 15); var cursor = null; while (true) { var apiUrl = 'https://gw.in.naver.com/home/api/v2/spaces/' + spaceId + '/subscribes/followers?limit=20&subscriberType=SPACE&sort=RECENT'; if (cursor) apiUrl = 'https://gw.in.naver.com/home/api/v2/spaces/' + spaceId + '/subscribes/followers?cursor=' + cursor + '&limit=20&subscriberType=SPACE&sort=RECENT'; var response = await fetch(apiUrl, { credentials: 'include', headers: { 'accept': 'application/json, text/plain, */*', 'x-api-level': '11' } }); if (!response.ok) throw new Error('팔로워 목록 가져오기 실패 (' + response.status + ')'); var data = await response.json(); STATE.followers.push.apply(STATE.followers, data.data); var progressPercent = 15; if (STATE.totalFollowers > 0) { var calculated = (STATE.followers.length / STATE.totalFollowers) * 35; progressPercent = 15 + Math.min(STATE.isFollowersApprox ? 33 : 35, calculated); } var countText = STATE.followers.length + (STATE.totalFollowers > 0 ? ' / ' + (STATE.isFollowersApprox ? '약 ' : '') + STATE.totalFollowers.toLocaleString() + (STATE.isFollowersApprox ? '+' : '') : '') + '명 수집'; updateStatus('나를 팬 한 목록을 가져오는 중...<br><span style="font-size: 12px; color: #666;">' + countText + '</span>', progressPercent); if (!data.paging || !data.paging.nextCursor) break; cursor = data.paging.nextCursor; await new Promise(function(resolve) { setTimeout(resolve, 300); }); } console.log('[팔로워 수집 완료] 총', STATE.followers.length, '명 (예상:', STATE.totalFollowers + '명, 차이:', (STATE.totalFollowers - STATE.followers.length) + '명)'); updateStatus('✓ 나를 팬 한: ' + STATE.followers.length + '명<br><br>잠시 대기 중...', 50); await new Promise(function(resolve) { setTimeout(resolve, 2000); }); console.log('[팔로잉 수집 시작] 예상:', STATE.totalFollowing, '명, 근사값:', STATE.isFollowingApprox); updateStatus('✓ 나를 팬 한: ' + STATE.followers.length + '명<br><br>내가 팬 한 목록을 가져오는 중...<br><span style="font-size: 12px; color: #666;">0명 수집 완료</span>', 50); cursor = null; while (true) { var apiUrl = 'https://gw.in.naver.com/home/api/v2/spaces/' + spaceId + '/subscribes/following?limit=20&sort=RECENT'; if (cursor) apiUrl = 'https://gw.in.naver.com/home/api/v2/spaces/' + spaceId + '/subscribes/following?cursor=' + cursor + '&limit=20&sort=RECENT'; var response = await fetch(apiUrl, { credentials: 'include', headers: { 'accept': 'application/json, text/plain, */*', 'x-api-level': '11' } }); if (!response.ok) throw new Error('팔로잉 목록 가져오기 실패 (' + response.status + ')'); var data = await response.json(); STATE.following.push.apply(STATE.following, data.data); var progressPercent = 50; if (STATE.totalFollowing > 0) { var calculated = (STATE.following.length / STATE.totalFollowing) * 35; progressPercent = 50 + Math.min(STATE.isFollowingApprox ? 33 : 35, calculated); } var countText = STATE.following.length + (STATE.totalFollowing > 0 ? ' / ' + (STATE.isFollowingApprox ? '약 ' : '') + STATE.totalFollowing.toLocaleString() + (STATE.isFollowingApprox ? '+' : '') : '') + '명 수집'; updateStatus('내가 팬 한 목록을 가져오는 중...<br><span style="font-size: 12px; color: #666;">' + countText + '</span>', progressPercent); if (!data.paging || !data.paging.nextCursor) break; cursor = data.paging.nextCursor; await new Promise(function(resolve) { setTimeout(resolve, 1000); }); } console.log('[팔로잉 수집 완료] 총', STATE.following.length, '명 (예상:', STATE.totalFollowing + '명, 차이:', (STATE.totalFollowing - STATE.following.length) + '명)'); updateStatus('✓ 나를 팬 한: ' + STATE.followers.length + '명<br>✓ 내가 팬 한: ' + STATE.following.length + '명<br><br>데이터 분석 중...', 90); recalculateFollowLists(); updateStatus('✓ 나를 팬 한: ' + STATE.followers.length + '명<br>✓ 내가 팬 한: ' + STATE.following.length + '명<br>✓ 나만 팬 한: ' + STATE.onlyIFollow.length + '명<br>✓ 상대만 팬 한: ' + STATE.onlyFollowsMe.length + '명<br>✓ 서로 팬 한: ' + STATE.mutual.length + '명<br><br>엑셀 파일 생성 중...', 95); function formatData(items) { return items.map(function(item) { return { '닉네임': item.nickName, 'Space ID': item.spaceId, '키워드': item.myKeyword || '', '팬수': item.subscriberCount || 0, 'URL ID': item.urlId || '', '프로필 URL': item.urlId ? 'https://in.naver.com/' + item.urlId : '', '가입일': item.createdAt ? new Date(item.createdAt).toLocaleDateString('ko-KR') : '', '최근 콘텐츠': item.lastContentsCreatedAt ? new Date(item.lastContentsCreatedAt).toLocaleDateString('ko-KR') : '-', '활성 채널 수': item.activeChannelCount || '', '활성 채널 타입': item.activeChannelTypes ? item.activeChannelTypes.join(', ') : '' }; }); } function regenerateExcel() { var wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(formatData(STATE.followers)), '나를 팬 한'); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(formatData(STATE.following)), '내가 팬 한'); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(formatData(STATE.onlyIFollow)), '나만 팬 한'); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(formatData(STATE.onlyFollowsMe)), '상대만 팬 한'); XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(formatData(STATE.mutual)), '서로 팬 한'); return wb; } window.downloadExcel = function() { var wb = regenerateExcel(); XLSX.writeFile(wb, '인플루언서_팬목록_' + new Date().toISOString().slice(0, 10).replace(/-/g, '') + '.xlsx'); }; window.followBack = async function() { if (STATE.onlyFollowsMe.length === 0) { alert('상대만 팬 한 대상이 없습니다.'); buttonContainer.innerHTML = ''; addButton('📥 엑셀 다운로드', window.downloadExcel, '#00c73c'); if (STATE.onlyFollowsMe.length > 0) addButton('💚 상대만 팬 한 : 수락 (' + STATE.onlyFollowsMe.length + '명)', window.followBack, '#4CAF50'); if (STATE.onlyIFollow.length > 0) addButton('🗑️ 나만 팬 한 : 제거 (' + STATE.onlyIFollow.length + '명)', window.unfollowOnly, '#ff6b6b'); addButton('❌ 종료', closeAndCleanup, '#ff4444'); return; } if (!confirm('⚠️ 상대만 팬 한 : 수락\n\n"상대만 팬 한" ' + STATE.onlyFollowsMe.length + '명에게 맞팬합니다.\n완료까지 약 ' + Math.ceil(STATE.onlyFollowsMe.length * 1.2 / 60) + '분 소요됩니다.\n\n진행하시겠습니까?')) return; updateStatus('상대만 팬 한 수락 진행 중...<br><span style="font-size: 12px; color: #666;">0 / ' + STATE.onlyFollowsMe.length + '명 처리</span>', 0); var successCount = 0; var failCount = 0; var targetList = STATE.onlyFollowsMe.slice(); for (var i = 0; i < targetList.length; i++) { if (await toggleFollow(targetList[i].spaceId, 'followback')) { successCount++; } else { failCount++; } var progress = ((i + 1) / targetList.length) * 100; updateStatus('상대만 팬 한 수락 진행 중...<br><span style="font-size: 12px; color: #666;">' + (i + 1) + ' / ' + targetList.length + '명 처리 (성공: ' + successCount + ', 실패: ' + failCount + ')</span>', progress); await new Promise(function(resolve) { setTimeout(resolve, 1000); }); } updateStatus('<div style="color: #00c73c; font-weight: bold; font-size: 15px; margin-bottom: 10px;">✓ 상대만 팬 한 수락 완료!</div><div style="font-size: 13px; line-height: 1.6; color: #555;">• 성공: ' + successCount + '명<br>• 실패: ' + failCount + '명<br>• 총 처리: ' + targetList.length + '명<br><br>계속해서 다른 작업을 진행할 수 있습니다.</div>', 100); buttonContainer.innerHTML = ''; addButton('📥 엑셀 다운로드', window.downloadExcel, '#00c73c'); if (STATE.onlyFollowsMe.length > 0) addButton('💚 상대만 팬 한 : 수락 (' + STATE.onlyFollowsMe.length + '명)', window.followBack, '#4CAF50'); if (STATE.onlyIFollow.length > 0) addButton('🗑️ 나만 팬 한 : 제거 (' + STATE.onlyIFollow.length + '명)', window.unfollowOnly, '#ff6b6b'); addButton('❌ 종료', closeAndCleanup, '#ff4444'); }; window.unfollowOnly = async function() { if (STATE.onlyIFollow.length === 0) { alert('나만 팬 한 대상이 없습니다.'); buttonContainer.innerHTML = ''; addButton('📥 엑셀 다운로드', window.downloadExcel, '#00c73c'); if (STATE.onlyFollowsMe.length > 0) addButton('💚 상대만 팬 한 : 수락 (' + STATE.onlyFollowsMe.length + '명)', window.followBack, '#4CAF50'); if (STATE.onlyIFollow.length > 0) addButton('🗑️ 나만 팬 한 : 제거 (' + STATE.onlyIFollow.length + '명)', window.unfollowOnly, '#ff6b6b'); addButton('❌ 종료', closeAndCleanup, '#ff4444'); return; } if (!confirm('⚠️ 나만 팬 한 : 제거\n\n"나만 팬 한" ' + STATE.onlyIFollow.length + '명을 팬 취소합니다.\n이 작업은 되돌릴 수 없으며, 완료까지 약 ' + Math.ceil(STATE.onlyIFollow.length * 1.2 / 60) + '분 소요됩니다.\n\n진행하시겠습니까?')) return; updateStatus('나만 팬 한 제거 진행 중...<br><span style="font-size: 12px; color: #666;">0 / ' + STATE.onlyIFollow.length + '명 처리</span>', 0); var successCount = 0; var failCount = 0; var targetList = STATE.onlyIFollow.slice(); for (var i = 0; i < targetList.length; i++) { if (await toggleFollow(targetList[i].spaceId, 'unfollow')) { successCount++; } else { failCount++; } var progress = ((i + 1) / targetList.length) * 100; updateStatus('나만 팬 한 제거 진행 중...<br><span style="font-size: 12px; color: #666;">' + (i + 1) + ' / ' + targetList.length + '명 처리 (성공: ' + successCount + ', 실패: ' + failCount + ')</span>', progress); await new Promise(function(resolve) { setTimeout(resolve, 1000); }); } updateStatus('<div style="color: #00c73c; font-weight: bold; font-size: 15px; margin-bottom: 10px;">✓ 나만 팬 한 제거 완료!</div><div style="font-size: 13px; line-height: 1.6; color: #555;">• 성공: ' + successCount + '명<br>• 실패: ' + failCount + '명<br>• 총 처리: ' + targetList.length + '명<br><br>모든 작업이 완료되었습니다.</div>', 100); buttonContainer.innerHTML = ''; addButton('📥 엑셀 다운로드', window.downloadExcel, '#00c73c'); if (STATE.onlyFollowsMe.length > 0) addButton('💚 상대만 팬 한 : 수락 (' + STATE.onlyFollowsMe.length + '명)', window.followBack, '#4CAF50'); if (STATE.onlyIFollow.length > 0) addButton('🗑️ 나만 팬 한 : 제거 (' + STATE.onlyIFollow.length + '명)', window.unfollowOnly, '#ff6b6b'); addButton('❌ 종료', closeAndCleanup, '#ff4444'); }; updateStatus('<div style="color: #00c73c; font-weight: bold; font-size: 15px; margin-bottom: 10px;">✓ 작업 완료!</div><div style="font-size: 13px; line-height: 1.6; color: #555;">• 나를 팬 한: ' + STATE.followers.length + '명' + (STATE.totalFollowers && STATE.totalFollowers !== STATE.followers.length ? ' <span style="color: #999;">(웹화면 상 표시: ' + (STATE.isFollowersApprox ? '약 ' : '') + STATE.totalFollowers.toLocaleString() + (STATE.isFollowersApprox ? '+' : '') + '명)</span>' : '') + '<br>• 내가 팬 한: ' + STATE.following.length + '명' + (STATE.totalFollowing && STATE.totalFollowing !== STATE.following.length ? ' <span style="color: #999;">(웹화면 상 표시: ' + (STATE.isFollowingApprox ? '약 ' : '') + STATE.totalFollowing.toLocaleString() + (STATE.isFollowingApprox ? '+' : '') + '명)</span>' : '') + '<br>• 나만 팬 한: ' + STATE.onlyIFollow.length + '명<br>• 상대만 팬 한: ' + STATE.onlyFollowsMe.length + '명<br>• 서로 팬 한: ' + STATE.mutual.length + '명<br><br><span style="font-size: 11px; color: #999;">💡 비인플 명단은 추출되지 않아 숫자 차이가 날 수 있습니다.</span></div>', 100); buttonContainer.innerHTML = ''; addButton('📥 엑셀 다운로드', window.downloadExcel, '#00c73c'); if (STATE.onlyFollowsMe.length > 0) addButton('💚 상대만 팬 한 : 수락 (' + STATE.onlyFollowsMe.length + '명)', window.followBack, '#4CAF50'); if (STATE.onlyIFollow.length > 0) addButton('🗑️ 나만 팬 한 : 제거 (' + STATE.onlyIFollow.length + '명)', window.unfollowOnly, '#ff6b6b'); addButton('❌ 종료', closeAndCleanup, '#ff4444'); STATE.buttonsActive = true; console.log('[자동 활성화] 인플 목록에 버튼 추가 시작'); setTimeout(async function() { await addButtonsToAllItems(); startObservingList(); startUrlObserver(); }, 1000); } catch (error) { console.error('오류 상세:', error); updateStatus('<div style="color: #ff4444; font-weight: bold;">❌ 오류 발생</div><div style="font-size: 12px; margin-top: 8px; color: #666;">' + error.message + '</div>', 0); buttonContainer.innerHTML = ''; addButton('❌ 종료', closeAndCleanup, '#ff4444'); } })();
